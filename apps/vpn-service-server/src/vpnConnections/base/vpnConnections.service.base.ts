/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VpnConnections as PrismaVpnConnections,
  ServerLocations as PrismaServerLocations,
  User as PrismaUser,
} from "@prisma/client";

export class VpnConnectionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VpnConnectionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vpnConnections.count(args);
  }

  async vpnConnectionsItems(
    args: Prisma.VpnConnectionsFindManyArgs
  ): Promise<PrismaVpnConnections[]> {
    return this.prisma.vpnConnections.findMany(args);
  }
  async vpnConnections(
    args: Prisma.VpnConnectionsFindUniqueArgs
  ): Promise<PrismaVpnConnections | null> {
    return this.prisma.vpnConnections.findUnique(args);
  }
  async createVpnConnections(
    args: Prisma.VpnConnectionsCreateArgs
  ): Promise<PrismaVpnConnections> {
    return this.prisma.vpnConnections.create(args);
  }
  async updateVpnConnections(
    args: Prisma.VpnConnectionsUpdateArgs
  ): Promise<PrismaVpnConnections> {
    return this.prisma.vpnConnections.update(args);
  }
  async deleteVpnConnections(
    args: Prisma.VpnConnectionsDeleteArgs
  ): Promise<PrismaVpnConnections> {
    return this.prisma.vpnConnections.delete(args);
  }

  async getServerLocation(
    parentId: string
  ): Promise<PrismaServerLocations | null> {
    return this.prisma.vpnConnections
      .findUnique({
        where: { id: parentId },
      })
      .serverLocation();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vpnConnections
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
