/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VpnConnections } from "./VpnConnections";
import { VpnConnectionsCountArgs } from "./VpnConnectionsCountArgs";
import { VpnConnectionsFindManyArgs } from "./VpnConnectionsFindManyArgs";
import { VpnConnectionsFindUniqueArgs } from "./VpnConnectionsFindUniqueArgs";
import { CreateVpnConnectionsArgs } from "./CreateVpnConnectionsArgs";
import { UpdateVpnConnectionsArgs } from "./UpdateVpnConnectionsArgs";
import { DeleteVpnConnectionsArgs } from "./DeleteVpnConnectionsArgs";
import { ServerLocations } from "../../serverLocations/base/ServerLocations";
import { User } from "../../user/base/User";
import { VpnConnectionsService } from "../vpnConnections.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VpnConnections)
export class VpnConnectionsResolverBase {
  constructor(
    protected readonly service: VpnConnectionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "read",
    possession: "any",
  })
  async _vpnConnectionsItemsMeta(
    @graphql.Args() args: VpnConnectionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VpnConnections])
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "read",
    possession: "any",
  })
  async vpnConnectionsItems(
    @graphql.Args() args: VpnConnectionsFindManyArgs
  ): Promise<VpnConnections[]> {
    return this.service.vpnConnectionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VpnConnections, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "read",
    possession: "own",
  })
  async vpnConnections(
    @graphql.Args() args: VpnConnectionsFindUniqueArgs
  ): Promise<VpnConnections | null> {
    const result = await this.service.vpnConnections(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VpnConnections)
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "create",
    possession: "any",
  })
  async createVpnConnections(
    @graphql.Args() args: CreateVpnConnectionsArgs
  ): Promise<VpnConnections> {
    return await this.service.createVpnConnections({
      ...args,
      data: {
        ...args.data,

        serverLocation: args.data.serverLocation
          ? {
              connect: args.data.serverLocation,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VpnConnections)
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "update",
    possession: "any",
  })
  async updateVpnConnections(
    @graphql.Args() args: UpdateVpnConnectionsArgs
  ): Promise<VpnConnections | null> {
    try {
      return await this.service.updateVpnConnections({
        ...args,
        data: {
          ...args.data,

          serverLocation: args.data.serverLocation
            ? {
                connect: args.data.serverLocation,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VpnConnections)
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "delete",
    possession: "any",
  })
  async deleteVpnConnections(
    @graphql.Args() args: DeleteVpnConnectionsArgs
  ): Promise<VpnConnections | null> {
    try {
      return await this.service.deleteVpnConnections(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServerLocations, {
    nullable: true,
    name: "serverLocation",
  })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "any",
  })
  async getServerLocation(
    @graphql.Parent() parent: VpnConnections
  ): Promise<ServerLocations | null> {
    const result = await this.service.getServerLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: VpnConnections
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
