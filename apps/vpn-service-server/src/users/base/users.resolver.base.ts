/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Users } from "./Users";
import { UsersCountArgs } from "./UsersCountArgs";
import { UsersFindManyArgs } from "./UsersFindManyArgs";
import { UsersFindUniqueArgs } from "./UsersFindUniqueArgs";
import { CreateUsersArgs } from "./CreateUsersArgs";
import { UpdateUsersArgs } from "./UpdateUsersArgs";
import { DeleteUsersArgs } from "./DeleteUsersArgs";
import { SubscriptionPlans } from "../../subscriptionPlans/base/SubscriptionPlans";
import { UsersService } from "../users.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Users)
export class UsersResolverBase {
  constructor(
    protected readonly service: UsersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "any",
  })
  async _usersItemsMeta(
    @graphql.Args() args: UsersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Users])
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "any",
  })
  async usersItems(@graphql.Args() args: UsersFindManyArgs): Promise<Users[]> {
    return this.service.usersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Users, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "own",
  })
  async users(
    @graphql.Args() args: UsersFindUniqueArgs
  ): Promise<Users | null> {
    const result = await this.service.users(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Users)
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "create",
    possession: "any",
  })
  async createUsers(@graphql.Args() args: CreateUsersArgs): Promise<Users> {
    return await this.service.createUsers({
      ...args,
      data: {
        ...args.data,

        subscriptionPlan: args.data.subscriptionPlan
          ? {
              connect: args.data.subscriptionPlan,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Users)
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @graphql.Args() args: UpdateUsersArgs
  ): Promise<Users | null> {
    try {
      return await this.service.updateUsers({
        ...args,
        data: {
          ...args.data,

          subscriptionPlan: args.data.subscriptionPlan
            ? {
                connect: args.data.subscriptionPlan,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Users)
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "delete",
    possession: "any",
  })
  async deleteUsers(
    @graphql.Args() args: DeleteUsersArgs
  ): Promise<Users | null> {
    try {
      return await this.service.deleteUsers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SubscriptionPlans, {
    nullable: true,
    name: "subscriptionPlan",
  })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "any",
  })
  async getSubscriptionPlan(
    @graphql.Parent() parent: Users
  ): Promise<SubscriptionPlans | null> {
    const result = await this.service.getSubscriptionPlan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
