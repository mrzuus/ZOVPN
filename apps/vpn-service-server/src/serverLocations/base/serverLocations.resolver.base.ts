/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServerLocations } from "./ServerLocations";
import { ServerLocationsCountArgs } from "./ServerLocationsCountArgs";
import { ServerLocationsFindManyArgs } from "./ServerLocationsFindManyArgs";
import { ServerLocationsFindUniqueArgs } from "./ServerLocationsFindUniqueArgs";
import { CreateServerLocationsArgs } from "./CreateServerLocationsArgs";
import { UpdateServerLocationsArgs } from "./UpdateServerLocationsArgs";
import { DeleteServerLocationsArgs } from "./DeleteServerLocationsArgs";
import { VpnConnectionsFindManyArgs } from "../../vpnConnections/base/VpnConnectionsFindManyArgs";
import { VpnConnections } from "../../vpnConnections/base/VpnConnections";
import { ServerLocationsService } from "../serverLocations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServerLocations)
export class ServerLocationsResolverBase {
  constructor(
    protected readonly service: ServerLocationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "any",
  })
  async _serverLocationsItemsMeta(
    @graphql.Args() args: ServerLocationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServerLocations])
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "any",
  })
  async serverLocationsItems(
    @graphql.Args() args: ServerLocationsFindManyArgs
  ): Promise<ServerLocations[]> {
    return this.service.serverLocationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServerLocations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "own",
  })
  async serverLocations(
    @graphql.Args() args: ServerLocationsFindUniqueArgs
  ): Promise<ServerLocations | null> {
    const result = await this.service.serverLocations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServerLocations)
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "create",
    possession: "any",
  })
  async createServerLocations(
    @graphql.Args() args: CreateServerLocationsArgs
  ): Promise<ServerLocations> {
    return await this.service.createServerLocations({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServerLocations)
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "update",
    possession: "any",
  })
  async updateServerLocations(
    @graphql.Args() args: UpdateServerLocationsArgs
  ): Promise<ServerLocations | null> {
    try {
      return await this.service.updateServerLocations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServerLocations)
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "delete",
    possession: "any",
  })
  async deleteServerLocations(
    @graphql.Args() args: DeleteServerLocationsArgs
  ): Promise<ServerLocations | null> {
    try {
      return await this.service.deleteServerLocations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [VpnConnections], { name: "vpnConnectionsItems" })
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "read",
    possession: "any",
  })
  async findVpnConnectionsItems(
    @graphql.Parent() parent: ServerLocations,
    @graphql.Args() args: VpnConnectionsFindManyArgs
  ): Promise<VpnConnections[]> {
    const results = await this.service.findVpnConnectionsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
