/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServerLocations as PrismaServerLocations,
  VpnConnections as PrismaVpnConnections,
} from "@prisma/client";

export class ServerLocationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServerLocationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serverLocations.count(args);
  }

  async serverLocationsItems(
    args: Prisma.ServerLocationsFindManyArgs
  ): Promise<PrismaServerLocations[]> {
    return this.prisma.serverLocations.findMany(args);
  }
  async serverLocations(
    args: Prisma.ServerLocationsFindUniqueArgs
  ): Promise<PrismaServerLocations | null> {
    return this.prisma.serverLocations.findUnique(args);
  }
  async createServerLocations(
    args: Prisma.ServerLocationsCreateArgs
  ): Promise<PrismaServerLocations> {
    return this.prisma.serverLocations.create(args);
  }
  async updateServerLocations(
    args: Prisma.ServerLocationsUpdateArgs
  ): Promise<PrismaServerLocations> {
    return this.prisma.serverLocations.update(args);
  }
  async deleteServerLocations(
    args: Prisma.ServerLocationsDeleteArgs
  ): Promise<PrismaServerLocations> {
    return this.prisma.serverLocations.delete(args);
  }

  async findVpnConnectionsItems(
    parentId: string,
    args: Prisma.VpnConnectionsFindManyArgs
  ): Promise<PrismaVpnConnections[]> {
    return this.prisma.serverLocations
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vpnConnectionsItems(args);
  }
}
