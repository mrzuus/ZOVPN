/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServerLocationsService } from "../serverLocations.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServerLocationsCreateInput } from "./ServerLocationsCreateInput";
import { ServerLocations } from "./ServerLocations";
import { ServerLocationsFindManyArgs } from "./ServerLocationsFindManyArgs";
import { ServerLocationsWhereUniqueInput } from "./ServerLocationsWhereUniqueInput";
import { ServerLocationsUpdateInput } from "./ServerLocationsUpdateInput";
import { VpnConnectionsFindManyArgs } from "../../vpnConnections/base/VpnConnectionsFindManyArgs";
import { VpnConnections } from "../../vpnConnections/base/VpnConnections";
import { VpnConnectionsWhereUniqueInput } from "../../vpnConnections/base/VpnConnectionsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServerLocationsControllerBase {
  constructor(
    protected readonly service: ServerLocationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServerLocations })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createServerLocations(
    @common.Body() data: ServerLocationsCreateInput
  ): Promise<ServerLocations> {
    return await this.service.createServerLocations({
      data: data,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServerLocations] })
  @ApiNestedQuery(ServerLocationsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serverLocationsItems(
    @common.Req() request: Request
  ): Promise<ServerLocations[]> {
    const args = plainToClass(ServerLocationsFindManyArgs, request.query);
    return this.service.serverLocationsItems({
      ...args,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServerLocations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serverLocations(
    @common.Param() params: ServerLocationsWhereUniqueInput
  ): Promise<ServerLocations | null> {
    const result = await this.service.serverLocations({
      where: params,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServerLocations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateServerLocations(
    @common.Param() params: ServerLocationsWhereUniqueInput,
    @common.Body() data: ServerLocationsUpdateInput
  ): Promise<ServerLocations | null> {
    try {
      return await this.service.updateServerLocations({
        where: params,
        data: data,
        select: {
          city: true,
          country: true,
          createdAt: true,
          id: true,
          ipAddress: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServerLocations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServerLocations(
    @common.Param() params: ServerLocationsWhereUniqueInput
  ): Promise<ServerLocations | null> {
    try {
      return await this.service.deleteServerLocations({
        where: params,
        select: {
          city: true,
          country: true,
          createdAt: true,
          id: true,
          ipAddress: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/vpnConnectionsItems")
  @ApiNestedQuery(VpnConnectionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VpnConnections",
    action: "read",
    possession: "any",
  })
  async findVpnConnectionsItems(
    @common.Req() request: Request,
    @common.Param() params: ServerLocationsWhereUniqueInput
  ): Promise<VpnConnections[]> {
    const query = plainToClass(VpnConnectionsFindManyArgs, request.query);
    const results = await this.service.findVpnConnectionsItems(params.id, {
      ...query,
      select: {
        connectionTime: true,
        createdAt: true,
        disconnectionTime: true,
        id: true,

        serverLocation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vpnConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "update",
    possession: "any",
  })
  async connectVpnConnectionsItems(
    @common.Param() params: ServerLocationsWhereUniqueInput,
    @common.Body() body: VpnConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vpnConnectionsItems: {
        connect: body,
      },
    };
    await this.service.updateServerLocations({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vpnConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "update",
    possession: "any",
  })
  async updateVpnConnectionsItems(
    @common.Param() params: ServerLocationsWhereUniqueInput,
    @common.Body() body: VpnConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vpnConnectionsItems: {
        set: body,
      },
    };
    await this.service.updateServerLocations({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vpnConnectionsItems")
  @nestAccessControl.UseRoles({
    resource: "ServerLocations",
    action: "update",
    possession: "any",
  })
  async disconnectVpnConnectionsItems(
    @common.Param() params: ServerLocationsWhereUniqueInput,
    @common.Body() body: VpnConnectionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vpnConnectionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateServerLocations({
      where: params,
      data,
      select: { id: true },
    });
  }
}
