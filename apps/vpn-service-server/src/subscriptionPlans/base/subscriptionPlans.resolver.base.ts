/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubscriptionPlans } from "./SubscriptionPlans";
import { SubscriptionPlansCountArgs } from "./SubscriptionPlansCountArgs";
import { SubscriptionPlansFindManyArgs } from "./SubscriptionPlansFindManyArgs";
import { SubscriptionPlansFindUniqueArgs } from "./SubscriptionPlansFindUniqueArgs";
import { CreateSubscriptionPlansArgs } from "./CreateSubscriptionPlansArgs";
import { UpdateSubscriptionPlansArgs } from "./UpdateSubscriptionPlansArgs";
import { DeleteSubscriptionPlansArgs } from "./DeleteSubscriptionPlansArgs";
import { UsersFindManyArgs } from "../../users/base/UsersFindManyArgs";
import { Users } from "../../users/base/Users";
import { SubscriptionPlansService } from "../subscriptionPlans.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubscriptionPlans)
export class SubscriptionPlansResolverBase {
  constructor(
    protected readonly service: SubscriptionPlansService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "any",
  })
  async _subscriptionPlansItemsMeta(
    @graphql.Args() args: SubscriptionPlansCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubscriptionPlans])
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "any",
  })
  async subscriptionPlansItems(
    @graphql.Args() args: SubscriptionPlansFindManyArgs
  ): Promise<SubscriptionPlans[]> {
    return this.service.subscriptionPlansItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubscriptionPlans, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "own",
  })
  async subscriptionPlans(
    @graphql.Args() args: SubscriptionPlansFindUniqueArgs
  ): Promise<SubscriptionPlans | null> {
    const result = await this.service.subscriptionPlans(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlans)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "create",
    possession: "any",
  })
  async createSubscriptionPlans(
    @graphql.Args() args: CreateSubscriptionPlansArgs
  ): Promise<SubscriptionPlans> {
    return await this.service.createSubscriptionPlans({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlans)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "update",
    possession: "any",
  })
  async updateSubscriptionPlans(
    @graphql.Args() args: UpdateSubscriptionPlansArgs
  ): Promise<SubscriptionPlans | null> {
    try {
      return await this.service.updateSubscriptionPlans({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubscriptionPlans)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "delete",
    possession: "any",
  })
  async deleteSubscriptionPlans(
    @graphql.Args() args: DeleteSubscriptionPlansArgs
  ): Promise<SubscriptionPlans | null> {
    try {
      return await this.service.deleteSubscriptionPlans(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Users], { name: "usersItems" })
  @nestAccessControl.UseRoles({
    resource: "Users",
    action: "read",
    possession: "any",
  })
  async findUsersItems(
    @graphql.Parent() parent: SubscriptionPlans,
    @graphql.Args() args: UsersFindManyArgs
  ): Promise<Users[]> {
    const results = await this.service.findUsersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
